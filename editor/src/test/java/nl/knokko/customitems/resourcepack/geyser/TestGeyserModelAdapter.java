package nl.knokko.customitems.resourcepack.geyser;

import com.github.cliftonlabs.json_simple.JsonException;
import com.github.cliftonlabs.json_simple.JsonObject;
import com.github.cliftonlabs.json_simple.Jsoner;
import nl.knokko.customitems.editor.resourcepack.geyser.GeyserModelAdapter;
import nl.knokko.customitems.item.model.GeyserCustomModel;
import nl.knokko.customitems.util.IOHelper;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class TestGeyserModelAdapter {

    private static byte[] read(String path) throws IOException {
        return IOHelper.readAllBytes(TestGeyserModelAdapter.class.getResourceAsStream(path));
    }

    private static void assertJsonEquals(byte[] expected, byte[] actual) throws JsonException {
        JsonObject expectedJson = (JsonObject) Jsoner.deserialize(new String(expected, StandardCharsets.UTF_8));
        JsonObject actualJson = (JsonObject) Jsoner.deserialize(new String(actual, StandardCharsets.UTF_8));
        if (!expectedJson.equals(actualJson)) {
            assertEquals(Jsoner.prettyPrint(expectedJson.toJson()), Jsoner.prettyPrint(actualJson.toJson()));
        }
    }

    @Test
    public void testAdaptAutoGenerated() throws IOException, GeyserModelAdapter.ConversionException, JsonException {
        GeyserCustomModel result = GeyserModelAdapter.adaptAutoGenerated(
                "kci_item_rong",
                read("automatic/animations.json"),
                read("automatic/attachable.json"),
                read("automatic/model.json"),
                read("automatic/texture.png")
        );

        assertEquals("kci_item_rong", result.attachableId);
        assertEquals("geometry.kci_item_rong.default", result.geometryId);

        assertArrayEquals(read("automatic/texture.png"), result.textureFile);
        assertJsonEquals(read("automatic/expected_animations.json"), result.animationFile);
        assertJsonEquals(read("automatic/expected_attachable.json"), result.attachableFile);
        assertJsonEquals(read("automatic/expected_model.json"), result.modelFile);
    }

    @Test
    public void testAdaptManuallySelected() throws IOException, GeyserModelAdapter.ConversionException, JsonException {
        byte[] originalStaff = read("manual/staff.json");

        GeyserModelAdapter.ManualResult result = GeyserModelAdapter.adaptManuallySelected(
                "kci_test_staff", originalStaff
        );

        assertEquals("geometry.geyser_custom.geo_69ffc83", result.geometryId);
        assertNotNull(result.newAttachableBytes);
        assertJsonEquals(read("manual/expected_staff.json"), result.newAttachableBytes);
    }
}
